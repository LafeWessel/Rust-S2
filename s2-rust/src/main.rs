


use autocxx::prelude::*; // use all the main autocxx functions

include_cpp! {
    #include "_fp_contract_off.h"
    #include "encoded_s2cell_id_vector.h"
    #include "encoded_s2point_vector.h"
    #include "encoded_s2shape_index.h"
    #include "encoded_string_vector.h"
    #include "encoded_uint_vector.h"
    #include "id_set_lexicon.h"
    #include "mutable_s2shape_index.h"
    #include "r1interval.h"
    #include "r2.h"
    #include "r2rect.h"
    #include "s1angle.h"
    #include "s1chord_angle.h"
    #include "s1interval.h"
    #include "s2boolean_operation.h"
    #include "s2buffer_operation.h"
    #include "s2builder.h"
    #include "s2builder_graph.h"
    #include "s2builder_layer.h"
    #include "s2builderutil_closed_set_normalizer.h"
    #include "s2builderutil_find_polygon_degeneracies.h"
    #include "s2builderutil_get_snapped_winding_delta.h"
    #include "s2builderutil_graph_shape.h"
    #include "s2builderutil_lax_polygon_layer.h"
    #include "s2builderutil_lax_polyline_layer.h"
    #include "s2builderutil_s2point_vector_layer.h"
    #include "s2builderutil_s2polygon_layer.h"
    #include "s2builderutil_s2polyline_layer.h"
    #include "s2builderutil_s2polyline_vector_layer.h"
    #include "s2builderutil_snap_functions.h"
    #include "s2builderutil_testing.h"
    #include "s2cap.h"
    #include "s2cell.h"
    #include "s2cell_id.h"
    #include "s2cell_index.h"
    #include "s2cell_union.h"
    #include "s2centroids.h"
    #include "s2closest_cell_query.h"
    #include "s2closest_cell_query_base.h"
    #include "s2closest_edge_query.h"
    #include "s2closest_edge_query_base.h"
    #include "s2closest_edge_query_testing.h"
    #include "s2closest_point_query.h"
    #include "s2closest_point_query_base.h"
    #include "s2contains_point_query.h"
    #include "s2contains_vertex_query.h"
    #include "s2convex_hull_query.h"
    #include "s2coords.h"
    #include "s2coords_internal.h"
    #include "s2crossing_edge_query.h"
    #include "s2debug.h"
    #include "s2distance_target.h"
    #include "s2earth.h"
    #include "s2edge_clipping.h"
    #include "s2edge_crosser.h"
    #include "s2edge_crossings.h"
    #include "s2edge_crossings_internal.h"
    #include "s2edge_distances.h"
    #include "s2edge_tessellator.h"
    #include "s2edge_vector_shape.h"
    #include "s2error.h"
    #include "s2furthest_edge_query.h"
    #include "s2hausdorff_distance_query.h"
    #include "s2latlng.h"
    #include "s2latlng_rect.h"
    #include "s2latlng_rect_bounder.h"
    #include "s2lax_loop_shape.h"
    #include "s2lax_polygon_shape.h"
    #include "s2lax_polyline_shape.h"
    #include "s2loop.h"
    #include "s2loop_measures.h"
    #include "s2max_distance_targets.h"
    #include "s2measures.h"
    #include "s2memory_tracker.h"
    #include "s2metrics.h"
    #include "s2min_distance_targets.h"
    #include "s2padded_cell.h"
    #include "s2point.h"
    #include "s2point_compression.h"
    #include "s2point_index.h"
    #include "s2point_region.h"
    #include "s2point_span.h"
    #include "s2point_vector_shape.h"
    #include "s2pointutil.h"
    #include "s2polygon.h"
    #include "s2polyline.h"
    #include "s2polyline_alignment.h"
    #include "s2polyline_alignment_internal.h"
    #include "s2polyline_measures.h"
    #include "s2polyline_simplifier.h"
    #include "s2predicates.h"
    #include "s2predicates_internal.h"
    #include "s2projections.h"
    #include "s2r2rect.h"
    #include "s2region.h"
    #include "s2region_coverer.h"
    #include "s2region_intersection.h"
    #include "s2region_term_indexer.h"
    #include "s2region_union.h"
    #include "s2shape.h"
    #include "s2shape_index.h"
    #include "s2shape_index_buffered_region.h"
    #include "s2shape_index_measures.h"
    #include "s2shape_index_region.h"
    #include "s2shape_measures.h"
    #include "s2shape_nesting_query.h"
    #include "s2shapeutil_build_polygon_boundaries.h"
    #include "s2shapeutil_coding.h"
    #include "s2shapeutil_contains_brute_force.h"
    #include "s2shapeutil_conversion.h"
    #include "s2shapeutil_count_edges.h"
    #include "s2shapeutil_edge_iterator.h"
    #include "s2shapeutil_get_reference_point.h"
    #include "s2shapeutil_range_iterator.h"
    #include "s2shapeutil_shape_edge.h"
    #include "s2shapeutil_shape_edge_id.h"
    #include "s2shapeutil_testing.h"
    #include "s2shapeutil_visit_crossing_edge_pairs.h"
    #include "s2testing.h"
    #include "s2text_format.h"
    #include "s2wedge_relations.h"
    #include "s2winding_operation.h"
    #include "s2wrapped_shape.h"
    #include "sequence_lexicon.h"
    #include "thread_testing.h"
    #include "value_lexicon.h"
    
    safety!(unsafe) // see details of unsafety policies described in the 'safety' section of the book
    // generate!("S2Cell") // add this line for each function or type you wish to generate
    generate!("R1Interval")
    generate!("R2Rect")
    generate!("S2CellId")
    generate!("S2Cell")
    generate!("S1Angle")
    generate!("S1ChordAngle")
    generate!("S2RegionCoverer")
    generate!("S2Cap")
    generate!("S2LatLng")
    generate!("S2LatLngRect")


}

fn main(){

    println!("Hello world");
    let cell = ffi::R1Interval::new(0.5, 0.5);
}