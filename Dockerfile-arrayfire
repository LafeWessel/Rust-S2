FROM nvidia/cuda:11.8.0-devel-ubuntu20.04
MAINTAINER support@arrayfire.com

ENV DEBIAN_FRONTEND=nonintercative

RUN apt-get update && apt-get install -y software-properties-common && \
    apt-get install -y --no-install-recommends \
        build-essential \
        clinfo \
        cmake \
        git \
        libboost-all-dev \
        libfftw3-dev \
        libfontconfig1-dev \
        libfreeimage-dev \
        liblapack-dev \
        liblapacke-dev \
        libopenblas-dev \
        ocl-icd-opencl-dev \
        opencl-headers \
        wget \
        xorg-dev && \
    rm -rf /var/lib/apt/lists/*

# Setting up symlinks for libcuda and OpenCL ICD
RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib/libcuda.so.1 && \
    ln -s /usr/lib/libcuda.so.1 /usr/lib/libcuda.so && \
    mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd && \
    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
ENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}

WORKDIR /root

# Build GLFW from source
RUN git clone --depth 1 --branch 3.3.4 https://github.com/glfw/glfw.git && \
    cd glfw && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr .. && \
    make -j4 && \
    make install

RUN cd /tmp && \
    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    echo "deb https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list && \
    add-apt-repository "deb https://apt.repos.intel.com/oneapi all main" && \
    apt update -y && apt install -y intel-basekit

SHELL ["/bin/bash", "-c"]

# AF_DISABLE_GRAPHICS - Environment variable to disable graphics at
# runtime due to lack of graphics support by docker - visit
# http://arrayfire.org/docs/configuring_environment.htm#af_disable_graphics
# for more information
ENV AF_PATH=/opt/arrayfire AF_DISABLE_GRAPHICS=1
ARG COMPILE_GRAPHICS=OFF
RUN source /opt/intel/oneapi/setvars.sh && \
    git clone --depth 1 --recursive https://github.com/arrayfire/arrayfire.git -b master && \
    cd arrayfire && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/opt/arrayfire-3 \
             -DCMAKE_BUILD_TYPE=Release \
             -DAF_BUILD_CPU=ON \
             -DAF_BUILD_CUDA=ON \
             -DAF_BUILD_DOCS=OFF \
             -DAF_BUILD_EXAMPLES=ON \
             -DAF_BUILD_OPENCL=ON \
             -DAF_BUILD_UNIFIED=ON \
             -DAF_WITH_FREEIMAGE_STATIC=OFF && \
            #  -DCOMPUTES_DETECTED_LIST="30" \
            #  ;35;37;50;52;60" \
    make && make install && \
    mkdir -p ${AF_PATH} && ln -s /opt/arrayfire-3/* ${AF_PATH}/ && \
    echo "${AF_PATH}/lib" >> /etc/ld.so.conf.d/arrayfire.conf && \
    echo "/usr/local/cuda/nvvm/lib64" >> /etc/ld.so.conf.d/arrayfire.conf
RUN ldconfig

WORKDIR /root/arrayfire

RUN apt-get update
RUN apt-get install -y cmake git libssl-dev curl gcc build-essential
 
# install abseil
WORKDIR /abseil
RUN git clone https://github.com/abseil/abseil-cpp.git
# RUN cmake -S /abseil/abseil-cpp -B /abseil/build/abseil-cpp -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=/absl -DABSL_ENABLE_INSTALL=ON -DBUILD_TESTING=OFF -DABSL_PROPAGATE_CXX_STD=ON
# RUN cmake --build /abseil/build/abseil-cpp --target install

# install S2 geometry
WORKDIR /s2
RUN git clone https://github.com/google/s2geometry.git
WORKDIR /s2/s2geometry/build
# RUN cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_PREFIX_PATH=/absl -DWITH_PYTHON=OFF -DCMAKE_INSTALL_PREFIX=/s2/bin ..
# RUN make install

# install Rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y

# install bindgen dependencies
RUN apt-get install -y llvm-dev libclang-dev clang
ENV PATH="/root/.cargo/bin:${PATH}"

# install ArrayFire binaries
# RUN apt-get install -y gnupg2 ca-certificates apt-utils software-properties-common wget
# RUN apt-key adv --fetch-key https://repo.arrayfire.com/GPG-PUB-KEY-ARRAYFIRE-2020.PUB
# RUN echo "deb [arch=amd64] https://repo.arrayfire.com/debian all main" | tee /etc/apt/sources.list.d/arrayfire.list

# RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
# RUN dpkg -i cuda-keyring_1.0-1_all.deb
# RUN rm /usr/share/keyrings/cuda-archive-keyring.gpg && rm /etc/apt/sources.list.d/cuda-ubuntu2004-x86_64.list
# RUN apt-get -y install cuda

# RUN wget https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_520.61.05_linux.run
# RUN /bin/bash cuda_11.8.0_520.61.05_linux.run

# RUN apt-key del 7fa2af80
# RUN dpkg --install cuda-repo-ubuntu_20_x86_64.deb
# RUN cp /var/cuda-repo-ubuntu-20-04-local/cuda-*-keyring.gpg /usr/share/keyrings/
# RUN apt-get install cuda
# RUN apt-get install nvidia-gds 

# RUN apt-get install -y arrayfire-cuda3-cuda-11-6

WORKDIR /code
CMD ["/bin/bash"]